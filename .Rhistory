tmp <- cbind(pml_train[,x],pml_train[,"classe"])
preProc <- preProcess(log10(pml_train[,-160]),method = "pca",pcaComp = 2)
tmp[sapply(tmp, function(x) !any(is.na(x)))]
temp <- tmp[sapply(tmp, function(x) !any(is.na(x)))]
temp
names(temp)
x <- lapply(pml_train[,-160],class)=='numeric'
tmp <- cbind(pml_train[,x],pml_train[,"classe"])
temp <- tmp[sapply(tmp, function(x) !any(is.na(x)))]
names(temp)
tmp <- cbind(pml_train[,x],pml_train[,160])
temp <- tmp[sapply(tmp, function(x) !any(is.na(x)))]
names(temp)
x <- lapply(pml_train[,-160],class)=='numeric'
tmp <- cbind(pml_train[,x],pml_train[,"classe"])
temp <- tmp[sapply(tmp, function(x) !any(is.na(x)))]
preProc <- preProcess(temp[,-28],method = "pca",pcaComp = 5)
trainPC <- predict(preProc,temp[,-28])
modelFit <- train(pml_train$classe~., method="gbm",data=trainPC)
confusionMatrix(pml_train[,160],predict(modelFit,trainPC))
testPC <- predict(preProc,rel_test)
preProc <- preProcess(temp[,-28],method = "pca",thres=0.8)
library(caret)
library(gbm)
library(plyr)
preProc <- preProcess(temp[,-28],method = "pca",thresh = 0.8)
trainPC <- predict(preProc,temp[,-28])
modelFit <- train(pml_train$classe~., method="gbm",data=trainPC)
confusionMatrix(pml_train[,160],predict(modelFit,trainPC))
pml_test <- read.csv(file ="pml/pml-testing.csv")
y <- lapply(pml_train[,-160],class)=='numeric'
tmp_t <- cbind(pml_train[,x],pml_train[,"classe"])
temp_t <- tmp_t[sapply(tmp_t, function(x) !any(is.na(x)))]
testPC <- predict(preProc,temp_t)
pdct <- predict(modFit,testPC)
pdct <- predict(modelFit,testPC)
pdct
y <- lapply(pml_train[,-160],class)=='numeric'
tmp_t <- pml_test[,y]
temp_t <- tmp_t[sapply(tmp_t, function(x) !any(is.na(x)))]
testPC <- predict(preProc,temp_t)
pdct <- predict(modelFit,testPC)
pdct
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(pdct)
preProc <- preProcess(temp[,-28],method = "pca",thresh = 0.9)
trainPC <- predict(preProc,temp[,-28])
rm(list=ls())
library(swirl)
swirl()
lm(child ~ parent,data = galton)
fit <- lm(child ~ parent,data = galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- fit$residuals
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,sum(varRes,varEst))
all.equal(varChild,varRes+varEst)
efit <-
lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(galton$child,galton$parent)
cor(gpa_nor,gch_nor)
4
l_nor <- lm(gch_nor ~ gpa_nor)
rm(list = ls())
library(swirl)
swirl()
fit <- lm(chilt ~ parent,data = galton)
fit <- lm(child ~ parent,data = galton)
sqrt(fit$residuals/(n-2))
sqrt(fsum(it$residuals)/(n-2))
sqrt(sum(it$residuals)/(n-2))
sqrt(sum(fit$residuals)/(n-2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- galton$child
mu <- mean(galton$child)
sTot <- galton$child-mu
sTot <- sum(galton$child-mu
sTot <- sum((galton$child-mu)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(sum((fit$residuals)-galton$child)^2)
2
sRes <- deviance(fit)
sRes/sTot
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent , galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth",trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility~.,data=swiss)
all <- lm(Fertility ~ ., swiss)
all
summary(all)
summary(lm(Fertility~agriculture,data=swiss))
summary(lm(Fertility~Agriculture,data=swiss))
cor(swiss$Education,swiss$Examination)
cor(swiss$Education,swiss$Agriculture)
makelms()
ec <- sum(swiss$Examination,swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility~.+ec,data=swiss)
all$coefficienst-efit$coefficients
all$coefficients-efit$coefficients
rm(list=ls())
library(MASS)
fit <- glm(use~auto,data = shuttle,family = "binomial")
fit <- glm(use~wind,data = shuttle,family = "binomial")
fit$coefficients
exp(fit$coefficients)
fit2 <- glm(use~wind+magn,data = shuttle,family = "binomial")
exp(fit2$coefficients)
fitminus <- glm(use~wind,data = shuttle,family = "binomial")
fitminus$coefficients
fitminus <- glm(use~wind-1,data = shuttle,family = "binomial")
fitminus$coefficients
fitminus <- glm(1-use~wind,data = shuttle,family = "binomial")
fitminus <- glm(use-1~wind,data = shuttle,family = "binomial")
poisfit <- glm(count~spray,data=InsectSprays,family = "poisson")
poisfit$coefficients
poisfit$coefficients[0]/poisfit$coefficients[1]
poisfit$coefficients[0]
poisfit$coefficients[1]
poisfit$coefficients[1]/poisfit$coefficients[2]
poisfit$coefficients[2]/poisfit$coefficients[1]
InsectSprays$spray
new <- InsectSprays[InsectSprays$spray=="A" | InsectSprays$spray=="B",]
View(new)
poisfit <- glm(count~spray,data=new,family = "poisson")
poisfit$coefficients
exp(poisfit$coefficients)
exp(poisfit$coefficients)/1+exp(poisfit$coefficients)
poisfit <- glm(count~spray,data=new,offset = log(visits+1),family = "poisson")
poisfit <- glm(count~spray,data=new,offset = log(spray+1),family = "poisson")
poisfit <- glm(count~spray,data=new,offset = log(count+1),family = "poisson")
poisfit$coefficients
poisfit$coefficients[2]/poisfit$coefficients[1]
exp(poisfit$coefficients[2])
exp(poisfit$coefficients[1])
library(swirl)
swirl()
6
dim(InsectSprays)
head()
head(InsectSprays)
"head(InsectSprays,15)
head(InsectSprays,15)
sx
sA
InsectSprays[,2]
summary(InsectSprays[,2])
sapply(InsectSprays[,2],2)
sapply(InsectSprays[,2],max)
sapply(InsectSprays[,2],1)
2
sapply(InsectSprays,class)
fit <- lm(count~spray,data=InsectSprays)
fit$coefficients
summary(fit)$coef
summary(fit)$coef[,1]
est <- summary(fit)$coef[,1]
sA
mean(sA)
mean(sB)
nfit <- lm(count~spray-1,data=InsectSprays)
summary(nfit)$coef
sC
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,"C")
nfit <- lm(count~spray-1,data=spray2)
1
fit2 <- lm(count ~ spray2, InsectSprays)
sC
summary(fit2)$coef
2
mean(sC)
2
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
2
fit <-  lm(hunger$Numeric ~ hunger$Year)
summary(fit)
summary(fit)$coef
2
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
2
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
1
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
summary(lmBoth$coefficients)
summary(lmBoth)
2
lmInter <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex + hunger$Year * hunger$Sex)
summary(lmInter)
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
glmMod <- lm(y~.,data = vowel.train,method = "glm")
rfMod <- lm(y~.,data = vowel.train,method = "rf")
predict(glmMod,newdata =vowel.test )
table(predict(glmMod,newdata =vowel.test ),vowel.test$y)
library(caret)
confusionMatrix(predict(glmMod,newdata =vowel.test ),vowel.test$y)
confusionMatrix(predict(glmMod,newdata =vowel.test ))
confusionMatrix(predict(glmMod,newdata =vowel.test ),reference =vowel.test$y )
confusionMatrix(factor(predict(glmMod,newdata =vowel.test )),reference =vowel.test$y )
glmMod <- train(y~.,data = vowel.train,method = "glm")
rfMod <- train(y~.,data = vowel.train,method = "rf")
glmMod <- train(y~.,data = vowel.train,method = "glm")
glmMod <- train(y~.,data = vowel.train,method = "gbm")
confusionMatrix(predict(glmMod,newdata = vowel.test),vowel.test$y)
gbmCm <- confusionMatrix(predict(glmMod,newdata = vowel.test),vowel.test$y)
confusionMatrix(predict(rfMod,newdata = vowel.test),vowel.test$y)
confusionMatrix(predict(rfMod,newdata = vowel.test),predict(glmMod,newdata = vowel.test))
model1 <- train(diagnosis~.,data = training,method="rf")
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433 )
model1 <- train(diagnosis~.,data = training,method="rf")
model2 <- train(diagnosis~.,data = training,method="gbm")
model3 <- train(diagnosis~.,data = training,method="lda")
pred1 <- predict(model1,testing)
pred2 <- predict(model2,testing)
pred3 <- predict(model3,testing)
df <- data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
combFit <- train(diagnosis~.,method="rf",data=df)
pred <- predict(combFit,df)
pred
confusionMatrix(pred,df$diagnosis)
confusionMatrix(pred1)
confusionMatrix(pred2,testing$diagnosis)
confusionMatrix(pred1,testing$diagnosis)
#3
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFit <- train(CompressiveStrength~.,data = training,method="lasso")
plot.enet(modFit)
?plot.enet
plot.enet(modFit,xvar = "L1norm")
plot.enet(modFit$method,xvar = "L1norm")
object <- enet(lambda = 0,trace = T)
plot(object,xvar="step")
object <- enet(modFit,lambda = 0,trace = T)
plot(object,xvar="step")
object <- enet(modFit,lambda = 0,trace = T)
object <- enet(modFit,lambda = 0,trace = T,max.steps = 10)
lars(modFit,type = "lasso")
X <- model.matrix(modFif)
X <- model.matrix(modFit)
modFit$call
modFit$method
modFit$metric
plot.enet(modFit,xvar = "L1norm")
plot.enet(train(CompressiveStrength~.,data = training,method="lasso"),xvar = "L1norm")
library(lubridate)  # For year() function below
dat = read.csv("pml/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(e1071)
install.packages("e1071")
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
fit <- train(CompressiveStrength~.,data=training,method="svm")
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
fit <- train(CompressiveStrength~.,data=training,method="svm")
fit <- svm(CompressiveStrength~.,data=training)
prediction <- predict(fit,testing)
prediction <- predict(fit,testing)
sum((prediction-testing$CompressiveStrength)^2)
sqrt(sum((prediction-testing$CompressiveStrength)^2))
rm(list = ls())
library(swirl)
swirl()
2
x1c <- simbias()
1
apply(x1c, 1, mean)
3
fit1 <- lm(Fertility ~ Agriculture, swiss)
2
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
1
deviance(fit3)
7
d <- deviance(fit3)/43
2
n <- (deviance(fit1) - deviance(fit3))/2
9
n/d
pf(n/d, 2,43, lower.tail=FALSE)
9
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
rm(list=ls())
library(swirl)
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which=1()
plot(fit, which=1)
2
fitno <- lm(y ~ x, out2[-1, ])
2
plot(fitno, which=1)
coef(fifit)
coef(fifno)
2
coef(fit)-coef(fitno)
2
head(dfbeta(fit))
expression resno <- out2[1, "y"] - predict(fitno, out2[1,])
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
2
sigma <- sqrt(deviance(fit)/df.residual(fit))
2
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
2
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
2
dy <- predict(fitno, out2)-predict(fit, out2)
1
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rm(list=ls())
library(swirl)
swirl()
1
rgp1()
rgp2()
View(swiss)
2
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
1
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
ravenData
2
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial, data=ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
2
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
tail(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson,hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
2
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
8
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset =log(visits + 1))
qpois(.95,mdl2$fitted.values[704])
rm(list = ls())
shinyapps::shinyapps::setAccountInfo(name='galkampel', token='43D5B3EBFC603D0300181EF36908212F', secret='u8K4v9Q2aWFcLVzYbXpgm5XR50B1h4r+7pcgxm6T')
shinyapps::setAccountInfo(name='galkampel', token='43D5B3EBFC603D0300181EF36908212F', secret='u8K4v9Q2aWFcLVzYbXpgm5XR50B1h4r+7pcgxm6T')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
shinyapps::deployApp()
?iris
datasets(iris)
library(datasets)
datasets(iris)
iris
fit <- lm(Species~Sepal.Length+Sepal.Width,data = iris)
plot(fit)
class(iris$Species)
iris$Species
y <- factor(iris$Species,levels = c(1,2,3))
fit <- lm(y~Sepal.Length+Sepal.Width,data = iris)
fit <- lm(Species~Sepal.Length+Sepal.Width,data = iris)
fit <- lm(y~iris$Sepal.Length+iris$Sepal.Width)
fit <- lm(Species~Sepal.Length+Sepal.Width,data = iris)
y
Species
iris$Species
table(iris$Species)
y <- factor(iris$Species,labels = c("setosa","vesicolor","virginica"),levels = c(1,2,3))
y
?factor
cars <- mtcars
View(cars)
runApp()
library(shiny)
library(shiny)
runApp()
setwd("data_product/")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(trees)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
